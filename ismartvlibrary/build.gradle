apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.androidCompileSdkVersion
    buildToolsVersion rootProject.ext.androidBuildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.androidMinSdkVersion
        targetSdkVersion rootProject.ext.androidTargetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

repositories {
    flatDir {
        dirs 'libs'   // aar目录
    }
}

Map<String, String> rootDependence = rootProject.ext.dependencies

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.3.2'
    compile rootDependence.appCompat
    compile rootDependence.support_v4
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile('com.squareup.retrofit2:converter-simplexml:2.2.0') {
        exclude module: 'stax-api'
        exclude module: 'stax'
        exclude module: 'xpp3'
    }
    compile 'com.squareup.retrofit2:adapter-rxjava:2.2.0'
    compile 'io.reactivex:rxandroid:1.2.1'
}

def pkgName = 'ismartvlibrary.jar'

task clearJar(type: Delete) {
    delete "build/libs/${pkgName}"
}

//task makeJar(type: Copy) {
//    from('build/intermediates/bundles/release/')
//    into('build/libs/')
//    include('classes.jar')
//    rename('classes.jar', pkgName)
//}
//
//makeJar.dependsOn(clearJar, build)

task exportedJar(type: Jar) {
    from('build/intermediates/classes/release/') {
        include 'cn/**'
        include 'tv/**'
    }
//    from zipTree("libs/name.jar") // libs目录的第三方jar包
    destinationDir = file('build/libs/')
    exclude '**/BuildConfig.class'
    exclude '**/R.class'
    exclude '**/R$*.class'
    archiveName pkgName
    manifest {
        attributes 'Manifest-Version': 1.0
        attributes 'Author': 'LH'
    }
}
exportedJar.dependsOn(clearJar, build)
